{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\AddQuote.svelte",
    "..\\..\\Home.svelte",
    "..\\..\\NavBar.svelte",
    "..\\..\\PageHeader.svelte",
    "..\\..\\Quote.svelte",
    "..\\..\\Rating.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { Router, Link, Route, links } from \"svelte-routing\";\n\t\n\timport AddQuote from './routes/AddQuote.svelte'\n\timport Home from './routes/Home.svelte'\n\timport NavBar from './components/NavBar.svelte'\n\timport PageHeader from './components/PageHeader.svelte'\n\n</script>\n\n<style>\n\t:global(body) {\n\t\tcolor: #717070;\n\t}\n\n\t:global(a:hover, a:visited, a:link, a:active) {\n\t\ttext-decoration: none;\n\t}\n\t\n</style>\n\n<svelte:head>\n\t<!-- Font Awesome -->\n\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n\n\t<!-- Bootstrap 4-->\n  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n  <!-- <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js\"></script>\n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\"></script> -->\n\t\n\t<title>Quotes</title>\n\n</svelte:head>\n\n<div use:links>\n<Router>\n\t<div class=\"container\">\n\n\t\t<PageHeader />\n\n\t\t<NavBar />\n\n\t\t<Route path=\"/\"><Home /></Route>\n\t\n\t\t<Route path=\"add\"><AddQuote /></Route>\n\n\t</div>\n\t</Router>\n</div>\n\n",
    "<script>\r\n  // export let onQuoteAdded;\r\n\r\n  let authorClass = '';\r\n  let input; \r\n  let showRating = false;\r\n  let errors = null;\r\n  let quoteContentsClass = '';\r\n\r\n  resetInput()\r\n\r\n  $: {\r\n    showRating ? input.rating = 0 : input.rating = null\r\n    authorClass = errors ? (errors.name ? \"is-invalid\" : \"is-valid\") : '';\r\n    quoteContentsClass = errors ? (errors.quoteContents ? \"is-invalid\" : \"is-valid\") : '';\r\n  }\r\n\r\n  async function handleSubmit(event) {\r\n    if (!validateInput()) {\r\n      return \r\n    }\r\n\r\n    await fetch('http://localhost:3000/api/quotes', {\r\n      method: 'POST', \r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(input)\r\n    })\r\n\r\n    resetForm()  \r\n\r\n  }\r\n\r\n  function resetInput() {\r\n    input = {\r\n        en: '',\r\n        author: { name: '' }\r\n      }\r\n  }\r\n\r\n  function resetForm() {\r\n    resetInput() \r\n    showRating = false\r\n    errors = null\r\n  }\r\n\r\n  function validateInput() {\r\n    errors = {\r\n        name: input && input.author.name && input.author.name.trim() !== '' ? null : 'Required field',\r\n        quoteContents: input && input.en && input.en.trim() !== '' ? null : 'Required field',\r\n    }\r\n\r\n    return !Object.keys(errors).some(k => errors[k] !== null)\r\n    // returns true if all valid; returns false if 1+ errors\r\n  }\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n  form {\r\n    border-radius: 17px;\r\n    background-color: #f4f4f4;\r\n  }\r\n\r\n</style>\r\n\r\n<div class=\"form-wrapper p-3\">\r\n\r\n  <form on:submit|preventDefault={handleSubmit} class=\"p-3\">\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"author\">Author's Name*</label>\r\n      <input bind:value={input.author.name} type=\"text\" class=\"form-control {authorClass}\" placeholder=\"Enter name\" id=\"author\" autocomplete=\"off\"> \r\n\r\n      {#if errors !== null }\r\n        {#if errors.name == null } \r\n          <div class=\"valid-feedback\">Valid.</div> \r\n        {:else}\r\n          <div class=\"invalid-feedback\">{errors.name}</div>\r\n        {/if}\r\n      {/if}\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"quote-contents\">Quote Contents*</label>\r\n\r\n      <textarea bind:value={input.en} class=\"form-control {quoteContentsClass}\" rows=\"5\" id=\"quote-contents\"></textarea>\r\n\r\n      {#if errors !== null}\r\n        {#if errors.quoteContents == null}\r\n          <div class=\"valid-feedback\">Valid.</div>\r\n        {:else}\r\n          <div class=\"invalid-feedback\">{errors.quoteContents}</div>\r\n        {/if}\r\n      {/if}\r\n\r\n    </div>\r\n\r\n    <div class=\"form-group custom-control custom-switch\">\r\n      <input bind:checked={showRating} type=\"checkbox\" class=\"custom-control-input\" id=\"switch1\">\r\n      <label class=\"custom-control-label\" for=\"switch1\">Include Rating</label>\r\n    </div>\r\n\r\n    {#if showRating}\r\n      <div class=\"form-group\">\r\n        <label for=\"rating\">Rating {input.rating}</label>\r\n        <input bind:value={input.rating} type=\"range\" class=\"custom-range\" id=\"rating\" name=\"rating\" min=\"0\" max=\"5\" step=\"0.1\">\r\n      </div>\r\n    {/if}\r\n\r\n    <button type=\"submit\" class=\"btn btn-primary\">Submit Quote</button>\r\n\r\n  </form>\r\n\r\n</div>",
    "<script>\r\n\timport ExpandAllMenu from '../components/ExpandAllMenu.svelte'\r\n\timport LanguageDropdown from '../components/LanguageDropdown.svelte'\r\n    import Quote from '../components/Quote.svelte'\r\n    import Search from '../components/Search.svelte'\r\n\t\r\n\tconst url = 'http://localhost:3000/api/quotes'\r\n\t\r\n\tconst languages = [\r\n\t\t{code: 'en', label: 'English'}, \r\n\t\t{code: 'gib', label: 'Gibberish'}\r\n    ]\r\n    \r\n    let quotes = [];\r\n\tlet quotesFiltered = []\r\n\tlet selectedLanguage = 'en';\r\n\tlet expanded = false; \r\n\tlet authors = [];\r\n\tlet selectedAuthors = [];\r\n\tlet search;\r\n\tlet showAuthorDropdown = false;\r\n\t\r\n\t$: quotes, search, selectedAuthors, selectedLanguage, setQuotesFiltered()\r\n\r\n\tgetQuotes()\r\n\t\r\n\tasync function getQuotes() {\r\n\t\ttry {\r\n\t\t\tconst res = await fetch(url)\r\n\t\t\tquotes = await res.json()\t\r\n\t\t\tauthors = getAuthors(quotes)\r\n\t\t\t\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error)\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tfunction getAuthors(quotes) {\r\n\t\tlet authors = []\r\n\t\t\r\n\t\tfor (let i = 0; i < quotes.length; i++) {\r\n\t\t\tif (authors.includes(quotes[i].author.name)) {\r\n\t\t\t\tcontinue\r\n\t\t\t} else {\r\n\t\t\t\tauthors.push(quotes[i].author.name)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn authors.sort()\t\r\n\t}\r\n\t\r\n\tfunction authorFilter(quote) {\r\n\t\tif (selectedAuthors.length > 0) {\r\n\t\t\treturn selectedAuthors.includes(quote.author.name)\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\t\r\n\tfunction searchFilter(quote) {\r\n\t\tif (search) {\r\n\t\t\tlet searchInput = search.toLowerCase()\r\n\t\t\treturn quote.author.name.toLowerCase().includes(searchInput) || quote[selectedLanguage].toLowerCase().includes(searchInput)\t\t\r\n\t\t} \r\n\t\treturn true\r\n\t}\r\n\t\r\n\tfunction quoteMeetsFilters(quote) {\r\n\t\treturn searchFilter(quote) && authorFilter(quote)\r\n\t}\r\n\t\r\n\tfunction setQuotesFiltered() {\r\n\t\tquotesFiltered = quotes.filter(quoteMeetsFilters)\r\n\t}\r\n\r\n\tasync function onQuoteDelete(id) {\r\n\t\talert('Quote deleted!')\r\n\t\tawait getQuotes()\r\n\t}\r\n\r\n\tfunction toggleAuthorDropdown() {\r\n\t\tshowAuthorDropdown = !showAuthorDropdown\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.filter-bar {\r\n\t\tbackground-color: #f4f4f4;\r\n        border-bottom: 1px solid #e5e5e5;\r\n\t}\r\n\r\n\t.white-background {\r\n\t\tbackground-color: white; \r\n\t}\r\n\r\n</style>\r\n\r\n\r\n<!-- Filter Bar -->\r\n<div class=\"filter-bar d-flex justify-content-between p-2\">\r\n\r\n    <!-- Search Bar -->\r\n    <form class=\"form-inline\">\r\n        <Search bind:search />\r\n    </form>\r\n\r\n    <!-- Author Dropdown -->\r\n    <div class=\"dropdown\">\r\n        <button type=\"button\" class=\"btn btn-outline-secondary dropdown-toggle white-background\" on:click={toggleAuthorDropdown}>\r\n        Authors\r\n        </button>\r\n\r\n\t\t{#if showAuthorDropdown }\r\n\t\t\t<div class=\"dropdown-menu show p-1\">\r\n\t\t\t\t{#each authors as author}\r\n\t\t\t\t\t<div class=\"form-check\">\r\n\t\t\t\t\t\t<label class=\"form-check-label\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-check-input\" value={author} bind:group={selectedAuthors}>\r\n\t\t\t\t\t\t\t{author}\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t{/each}\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\r\n    </div>\r\n\r\n    <!-- Expand/Collapse menu -->\r\n\t<ExpandAllMenu bind:expanded />\r\n\r\n    <!-- Language Dropdown -->\r\n    <LanguageDropdown {languages} bind:selectedLanguage />\r\n\r\n</div>\r\n\r\n<div class=\"quotes\"> \r\n    {#each quotesFiltered as quote (quote.id)} <!-- need keyed each because we are filtering quotes in UI -->\r\n            <Quote {quote} {selectedLanguage} {expanded} {onQuoteDelete} />\r\n    {/each}\r\n</div>\r\n\r\n",
    "<script>\r\n\r\n\r\n</script>\r\n<style>\r\nnav {\r\n    border-bottom: 1px solid #e5e5e5;\r\n}\r\n\r\n</style>\r\n\r\n<nav class=\"nav d-flex justify-content-between\">\r\n    <a href=\"/\" class=\"p-2 text-muted\">Dashboard</a>\r\n    <a href=\"/add\" class=\"p-2 text-muted\">Add Quote</a>\r\n    <a href=\"/\" class=\"p-2 text-muted\">Explore Authors</a>\r\n    <a href=\"/\" class=\"p-2 text-muted\">Link 4</a>\r\n    <a href=\"/\" class=\"p-2 text-muted\">Link 5</a>\r\n</nav>",
    "<script>\r\n\r\n\r\n</script>\r\n<style>\r\n\t.page-header {\r\n\t\tborder-bottom: 1px solid #e5e5e5;\r\n\t}\r\n\r\n\t.page-header-title {\r\n\t\tfont-family: \"Playfair Display\", Georgia, \"Times New Roman\", serif;\r\n    \tfont-size: 2.25rem;\r\n\t\tfont-weight: bold;\r\n\t}\r\n</style>\r\n\r\n<header class=\"page-header\">\r\n    <div class=\"row d-flex align-items-center header-content\">\r\n        <div class=\"col-4\">\r\n            <a href=\"/\" class=\"text-muted\">Do something 1</a>\r\n        </div>\r\n        <div class=\"col-4 text-center page-header-title\" id=\"page-title\">\r\n            <a href=\"/\" class=\"text-dark\">Quotes</a>\r\n        </div>\r\n        <div class=\"col-4 text-right\">\r\n            <a href=\"/\" class=\"text-muted\">Sign Up</a>\r\n        </div>\r\n    </div>\r\n</header>",
    "<script>\r\n\timport { fade } from 'svelte/transition';\r\n\t\r\n\timport Rating from './Rating.svelte'\r\n\timport LongText from './LongText.svelte'\r\n\r\n\texport let quote; \r\n\texport let selectedLanguage;\r\n\texport let expanded;\r\n\texport let onQuoteDelete;\r\n\r\n\tasync function deleteQuote() {\r\n\t\ttry {\r\n\t\t\tawait fetch(`http://localhost:3000/api/quotes/${quote.id}`, {method: 'DELETE'})\r\n\t\t\tonQuoteDelete(quote.id)\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error)\r\n\t\t}\r\n\t}\r\n\r\n</script>\r\n\r\n\r\n<style>\r\n\t.quote {\r\n\t\tbackground-color: #eee;\r\n\t\tcolor: #444;\r\n\t\tpadding: 18px;\r\n\t\tmargin: 15px;\r\n\t\tborder: none;\r\n\t\toutline: none;\r\n\t}\r\n\t\r\n\t.author {\r\n\t\tfont-size: 30px;\r\n\t}\r\n\t\r\n\t.quote-contents {\r\n\t\tpadding: 2px;\r\n\t}\r\n\t\r\n\t.rating {\r\n\t\tfont-size: 18px;\r\n\t}\r\n\r\n</style>\r\n\r\n<div class='quote' id={quote.id} transition:fade|local>\r\n\t\r\n\t<div class=\"author\">\r\n\t\t{quote.author.name}\r\n\t</div>\r\n\t\r\n\t<div class=\"quote-contents\">\r\n\t\t<LongText text={quote[selectedLanguage]} {expanded} />\r\n\t</div>\r\n\t\r\n\t{#if quote.rating !== null }\r\n\t\t<div class=\"rating\">\t\r\n\t\t\t<Rating rating={quote.rating} /> \r\n\t\t</div>\r\n\t{/if}\r\n\r\n\t<a href='/' on:click|preventDefault={deleteQuote}><i class=\"fa fa-trash\"></i></a>\r\n\t\r\n</div>",
    "<script>\r\n\texport let rating; \r\n\t\r\n\tfunction determineStars(rating) {\r\n\t\tconst ratingRounded = Math.round(rating * 2) / 2\r\n\t\tlet starArray = [];\r\n\t\tfor (let i = 1; i <= 5; i++) {\r\n\t\t\tstarArray.push({\r\n\t\t\t\tfull: ratingRounded - i !== -0.5,\r\n\t\t\t\tchecked: ratingRounded > i - 1\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn starArray\r\n\t}\r\n\r\n</script>\r\n\r\n<style>\r\n\t.star {\r\n\t\tmargin: 2px;\r\n\t}\r\n\t\r\n\t.checked {\r\n\t\tcolor: orange;\r\n\t}\r\n\r\n</style>\r\n\r\n{#each determineStars(rating) as star}\r\n\t<span class=\"star fa fa-star{!star.full ? '-half-o' : ''} {star.checked ? 'checked' : ''}\"></span>\r\n{/each}\r\n\r\n"
  ],
  "names": [],
  "mappings": "AAWS,IAAI,AAAE,CAAC,AACd,KAAK,CAAE,OAAO,AACf,CAAC,AAEO,oCAAoC,AAAE,CAAC,AAC9C,eAAe,CAAE,IAAI,AACtB,CAAC;AC0CA,IAAI,eAAC,CAAC,AACJ,aAAa,CAAE,IAAI,CACnB,gBAAgB,CAAE,OAAO,AAC3B,CAAC;ACuBF,WAAW,cAAC,CAAC,AACZ,gBAAgB,CAAE,OAAO,CACnB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AACvC,CAAC,AAED,iBAAiB,cAAC,CAAC,AAClB,gBAAgB,CAAE,KAAK,AACxB,CAAC;ACvFF,GAAG,cAAC,CAAC,AACD,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AACpC,CAAC;ACFA,YAAY,eAAC,CAAC,AACb,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AACjC,CAAC,AAED,kBAAkB,eAAC,CAAC,AACnB,WAAW,CAAE,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAC/D,SAAS,CAAE,OAAO,CACrB,WAAW,CAAE,IAAI,AAClB,CAAC;ACYD,MAAM,eAAC,CAAC,AACP,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,AACd,CAAC,AAED,OAAO,eAAC,CAAC,AACR,SAAS,CAAE,IAAI,AAChB,CAAC,AAED,eAAe,eAAC,CAAC,AAChB,OAAO,CAAE,GAAG,AACb,CAAC,AAED,OAAO,eAAC,CAAC,AACR,SAAS,CAAE,IAAI,AAChB,CAAC;AC1BD,KAAK,cAAC,CAAC,AACN,MAAM,CAAE,GAAG,AACZ,CAAC,AAED,QAAQ,cAAC,CAAC,AACT,KAAK,CAAE,MAAM,AACd,CAAC"
}