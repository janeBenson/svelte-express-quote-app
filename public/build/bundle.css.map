{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Quote.svelte",
    "..\\..\\Rating.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { onMount } from 'svelte' \n\timport Quote from './Quote.svelte'\n\timport Search from './Search.svelte'\n\t\n\t//const url = 'https://programming-quotes-api.herokuapp.com/quotes/page/1?fbclid=IwAR0oZXvkEGjD8d12Eh1Iv8ivQr3_VBgr0rdrPV7Zz9bVY0V7HqW1gC9Yd54'\n\t\n\tconst url = 'http://localhost:3000/api/quotes'\n\t\n\tconst languages = [\n\t\t{code: 'en', label: 'English'}, \n\t\t{code: 'sr', label: 'Serbian'}\n\t]\n\tlet quotes = []; // need this to overcome array error for Each block\n\tlet quotesFiltered = []\n\tlet selectedLang;\n\tlet expanded = false; \n\tlet authors = [];\n\tlet selectedAuthors = [];\n\tlet search;\n\t\n\t$: quotes, search, selectedAuthors, selectedLang, setQuotesFiltered()\n\n\tgetQuotes()\n\t\n\tasync function getQuotes() {\n\t\ttry {\n\t\t\tconst res = await fetch(url)\n\t\t\tquotes = await res.json()\t\n\t\t\tauthors = getAuthors(quotes).sort()\n\t\t\t\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t}\t\n\t}\n\t\n\tfunction getAuthors(quotes) {\n\t\tlet authors = []\n\t\t\n\t\tfor (let i = 0; i < quotes.length; i++) {\n\t\t\tif (authors.includes(quotes[i].author)) {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tauthors.push(quotes[i].author)\n\t\t\t}\n\t\t}\n\t\treturn authors\n\t}\n\t\n\tfunction authorFilter(quote) {\n\t\tif (selectedAuthors.length > 0) {\n\t\t\treturn selectedAuthors.includes(quote.author)\n\t\t}\n\t\treturn true\n\t}\n\t\n\tfunction searchFilter(quote) {\n\t\tif (search) {\n\t\t\tlet searchInput = search.toLowerCase()\n\t\t\treturn quote.author.toLowerCase().includes(searchInput) || quote[selectedLang].toLowerCase().includes(searchInput)\t\t\n\t\t} \n\t\treturn true\n\t}\n\t\n\tfunction quoteMeetsFilters(quote) {\n\t\treturn searchFilter(quote) && authorFilter(quote)\n\t}\n\t\n\tfunction setQuotesFiltered() {\n\t\tquotesFiltered = quotes.filter(quoteMeetsFilters)\n\t}\n\n\tfunction onQuoteDelete(id) {\n\t\tquotes = quotes.filter(el => el.id !== id)\n\t}\n\n</script>\n\n<style>\n\t:global(body) {\n\t\tcolor: #717070;\n\t}\n\t.heading-content {\n\t\tvertical-align: center;\n\t\tmargin: 6px;\n\t}\n\t.heading-content > #page-title {\n\t\tcolor: #645e64;\n\t}\n\t#language-dropdown > select {\n\t\tfloat: right;\n\t}\n\t\n</style>\n\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n\n<div class=\"row heading-content\">\n\t<div id='page-title' class=\"col-sm-9\">\n\t\t<h1>Programming quotes</h1>\t\t\n\t</div>\n\t\n\t<div id='language-dropdown' class=\"col-sm-3\">\n\t\t<select bind:value={selectedLang}>\n\t\t\t{#each languages as lang}\n\t\t\t\t<option value={lang.code}>{lang.label}</option>\n\t\t\t{/each}\n\t\t</select>\t\t\t\n\t</div>\n</div>\n\n<select bind:value={expanded}>\n\t<option value={true}>Expand All</option> \n\t<option value={false}>Collapse All</option>\n</select>\t\t\t\n\n<select multiple bind:value={selectedAuthors}>\n\t{#each authors as author}\n\t\t<option value={author}>{author}</option>\n\t{/each}\n</select>\t\n\n<Search bind:search />\n\n<div class=\"quotes\"> \n\t{#each quotesFiltered as quote (quote.id)} <!-- need keyed each because we are filtering quotes -->\n\t\t\t<Quote {quote} {selectedLang} {expanded} {onQuoteDelete} />\n\t{/each}\n</div>\n\n\n\n",
    "<script>\r\n\texport let quote; \r\n\texport let selectedLang;\r\n\texport let expanded;\r\n\texport let onQuoteDelete;\r\n\t\r\n\timport Rating from './Rating.svelte'\r\n\timport LongText from './LongText.svelte'\r\n\r\n\tasync function deleteQuote() {\r\n\t\ttry {\r\n\t\t\tawait fetch(`http://localhost:3000/api/quotes/${quote.id}`, {method: 'DELETE'})\r\n\t\t\tonQuoteDelete(quote.id)\r\n\t\t\talert('Quote was removed!')\t\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error)\r\n\t\t}\r\n\t}\r\n\r\n</script>\r\n\r\n\r\n<style>\r\n\t.quote {\r\n\t\t\tbackground-color: #eee;\r\n\t\t\tcolor: #444;\r\n\t\t\tpadding: 18px;\r\n\t\t\tmargin: 15px;\r\n\t\t\tborder: none;\r\n\t\t\toutline: none;\r\n\t}\r\n\t\r\n\t.author {\r\n\t\tfont-size: 30px;\r\n\t}\r\n\t\r\n\t.quote-contents {\r\n\t\tpadding: 2px;\r\n\t}\r\n\t\r\n\t.rating {\r\n\t\tfont-size: 18px;\r\n\t}\r\n\r\n</style>\r\n\r\n<div class='quote' id={quote.id}>\r\n\t\r\n\t<div class=\"author\">\r\n\t\t{quote.author}\r\n\t</div>\r\n\t\r\n\t<div class=\"quote-contents\">\r\n\t\t<LongText text={quote[selectedLang]} {expanded} />\r\n\t</div>\r\n\t\r\n\t{#if quote.rating}\r\n\t<div class=\"rating\">\t\r\n\t\t<Rating rating={quote.rating} /> \r\n\t</div>\r\n\t{/if}\r\n\r\n\t<a href='/' on:click|preventDefault={deleteQuote}><i class=\"fa fa-trash\"></i></a>\r\n\t\r\n</div>",
    "<script>\r\n\texport let rating; \r\n\t\r\n\tfunction determineStars(rating) {\r\n\t\tconst ratingRounded = Math.round(rating * 2) / 2\r\n\t\tlet starArray = [];\r\n\t\tfor (let i = 1; i <= 5; i++) {\r\n\t\t\tstarArray.push({\r\n\t\t\t\tfull: ratingRounded - i !== -0.5,\r\n\t\t\t\tchecked: ratingRounded > i - 1\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn starArray\r\n\t}\r\n\r\n</script>\r\n\r\n<style>\r\n\t.checked {\r\n\t\tcolor: orange;\r\n\t\tmargin: 2px;\r\n\t}\r\n\r\n</style>\r\n\r\n{#each determineStars(rating) as star}\r\n\t<span class=\"fa fa-star{!star.full ? '-half-o' : ''} {star.checked ? 'checked' : ''}\"></span>\r\n{/each}\r\n\r\n"
  ],
  "names": [],
  "mappings": "AA+ES,IAAI,AAAE,CAAC,AACd,KAAK,CAAE,OAAO,AACf,CAAC,AACD,gBAAgB,8BAAC,CAAC,AACjB,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,GAAG,AACZ,CAAC,AACD,+BAAgB,CAAG,WAAW,eAAC,CAAC,AAC/B,KAAK,CAAE,OAAO,AACf,CAAC,AACD,iCAAkB,CAAG,MAAM,eAAC,CAAC,AAC5B,KAAK,CAAE,KAAK,AACb,CAAC;ACnED,MAAM,cAAC,CAAC,AACN,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,AACf,CAAC,AAED,OAAO,cAAC,CAAC,AACR,SAAS,CAAE,IAAI,AAChB,CAAC,AAED,eAAe,cAAC,CAAC,AAChB,OAAO,CAAE,GAAG,AACb,CAAC,AAED,OAAO,cAAC,CAAC,AACR,SAAS,CAAE,IAAI,AAChB,CAAC;ACzBD,QAAQ,cAAC,CAAC,AACT,KAAK,CAAE,MAAM,CACb,MAAM,CAAE,GAAG,AACZ,CAAC"
}